generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["postgresqlExtensions"]
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

model AlembicVersion {
  version_num String @id @db.VarChar(32)
}


model AuditLog {
  log_id      String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id     String              @db.Uuid
  action_type ActionTypeEnum
  entity_type AuditEntityTypeEnum
  entity_id   String              @db.Uuid
  timestamp   DateTime            @default(now()) @db.Timestamptz(6)
  details     Json                @default("{}")
}

model Block {
  block_id                                          String                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                              String                          @unique @db.VarChar(255)
  block_type                                        BlockTypeEnum
  description                                       String?
  created_at                                        DateTime                        @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime                        @default(now()) @db.Timestamptz(6)
  vector                                            Unsupported("vector")?
  current_version_id                                String?                         @db.Uuid
  EdgeVersion_Block_current_version_idToEdgeVersion EdgeVersion?                    @relation("Block_current_version_idToEdgeVersion", fields: [current_version_id], references: [version_id], onUpdate: NoAction, map: "fk_block_current_version")
  BlockCategory                                     BlockCategory[]
  Edge_Edge_source_block_idToBlock                  Edge[]                          @relation("Edge_source_block_idToBlock")
  Edge_Edge_target_block_idToBlock                  Edge[]                          @relation("Edge_target_block_idToBlock")
  EdgeVerification                                  EdgeVerification[]
  EdgeVerificationBlockRelation                     EdgeVerificationBlockRelation[]
  EdgeVersion_EdgeVersion_block_idToBlock           EdgeVersion[]                   @relation("EdgeVersion_block_idToBlock")
  PipelineBlock                                     PipelineBlock[]

  @@index([vector], map: "idx_blocks_vector")
}

model BlockCategory {
  block_category_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  block_id          String   @db.Uuid
  category_id       String   @db.Uuid
  Block             Block    @relation(fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_blockcategory_block")
  Category          Category @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_blockcategory_category")

  @@unique([block_id, category_id], map: "unique_block_category")
  @@index([block_id], map: "idx_block_category_block_id")
  @@index([category_id], map: "idx_block_category_category_id")
}

model Category {
  category_id    String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String          @unique @db.VarChar(255)
  parent_id      String?         @db.Uuid
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime        @default(now()) @db.Timestamptz(6)
  BlockCategory  BlockCategory[]
  Category       Category?       @relation("CategoryToCategory", fields: [parent_id], references: [category_id], onUpdate: NoAction, map: "fk_category_parent")
  other_Category Category[]      @relation("CategoryToCategory")
}

model Edge {
  edge_id                           String                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  source_block_id                   String                          @db.Uuid
  target_block_id                   String                          @db.Uuid
  created_at                        DateTime                        @default(now()) @db.Timestamptz(6)
  updated_at                        DateTime                        @default(now()) @db.Timestamptz(6)
  Block_Edge_source_block_idToBlock Block                           @relation("Edge_source_block_idToBlock", fields: [source_block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edge_source_block")
  Block_Edge_target_block_idToBlock Block                           @relation("Edge_target_block_idToBlock", fields: [target_block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edge_target_block")
  EdgeVerification                  EdgeVerification[]
  EdgeVerificationBlockRelation     EdgeVerificationBlockRelation[]
  EdgeVersion                       EdgeVersion[]
  PipelineEdge                      PipelineEdge[]

  @@index([source_block_id], map: "idx_edge_source_block_id")
  @@index([target_block_id], map: "idx_edge_target_block_id")
}

model EdgeVerification {
  verification_id String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  edge_id         String                 @db.Uuid
  status          VerificationStatusEnum
  verified_at     DateTime?              @db.Timestamptz(6)
  block_id        String                 @db.Uuid
  Block           Block                  @relation(fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edgeverification_block")
  Edge            Edge                   @relation(fields: [edge_id], references: [edge_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edgeverification_edge")

  @@index([edge_id], map: "idx_edge_verification_edge_id")
}

model EdgeVerificationBlockRelation {
  verification_id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  edge_id         String @db.Uuid
  block_id        String @db.Uuid
  Block           Block  @relation(fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_evbr_block")
  Edge            Edge   @relation(fields: [edge_id], references: [edge_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_evbr_edge")

  @@index([edge_id], map: "idx_edge_verification_edge_id_evbr")
}

model EdgeVersion {
  version_id                                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  edge_id                                     String   @db.Uuid
  block_id                                    String   @db.Uuid
  version                                     Int
  data                                        Json     @default("{}")
  created_at                                  DateTime @default(now()) @db.Timestamptz(6)
  Block_Block_current_version_idToEdgeVersion Block[]  @relation("Block_current_version_idToEdgeVersion")
  Block_EdgeVersion_block_idToBlock           Block    @relation("EdgeVersion_block_idToBlock", fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edgeversion_block")
  Edge                                        Edge     @relation(fields: [edge_id], references: [edge_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_edgeversion_edge")

  @@index([block_id], map: "idx_edge_version_block_id")
  @@index([edge_id], map: "idx_edge_version_edge_id")
}

model Pipeline {
  pipeline_id   String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String          @unique @db.VarChar(255)
  description   String?
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @db.Timestamptz(6)
  user_id       String          @db.Uuid
  Profile       Profile         @relation(fields: [user_id], references: [auth_uid], onDelete: Cascade, onUpdate: NoAction, map: "fk_pipeline_user")
  PipelineBlock PipelineBlock[]
  PipelineEdge  PipelineEdge[]
}

model PipelineBlock {
  pipeline_block_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pipeline_id       String   @db.Uuid
  block_id          String   @db.Uuid
  order             Int      @default(0)
  Block             Block    @relation(fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pipelineblock_block")
  Pipeline          Pipeline @relation(fields: [pipeline_id], references: [pipeline_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pipelineblock_pipeline")

  @@unique([pipeline_id, block_id], map: "unique_pipeline_block")
  @@index([block_id], map: "idx_pipeline_block_block_id")
  @@index([pipeline_id], map: "idx_pipeline_block_pipeline_id")
}

model PipelineEdge {
  pipeline_edge_id String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pipeline_id      String   @db.Uuid
  edge_id          String   @db.Uuid
  order            Int      @default(0)
  Edge             Edge     @relation(fields: [edge_id], references: [edge_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pipelineedge_edge")
  Pipeline         Pipeline @relation(fields: [pipeline_id], references: [pipeline_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pipelineedge_pipeline")

  @@unique([pipeline_id, edge_id], map: "unique_pipeline_edge")
  @@index([edge_id], map: "idx_pipeline_edge_edge_id")
  @@index([pipeline_id], map: "idx_pipeline_edge_pipeline_id")
}

model Profile {
  auth_uid    String      @id @default(uuid()) @db.Uuid
  username    String      @unique @db.VarChar(255)
  email       String      @unique @db.VarChar(255)
  role        String      @default("user") @db.VarChar(50)
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  updated_at  DateTime    @default(now()) @db.Timestamptz(6)
  ApiKey      ApiKey[]
  Pipeline    Pipeline[]

  // @@map("profiles")
}

model ApiKey {
  api_key_id        String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id           String  @db.Uuid
  encrypted_api_key String
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  expires_at        DateTime @db.Timestamptz(6)
  is_active         Boolean @default(true)
  Profile           Profile @relation(fields: [user_id], references: [auth_uid], onDelete: Cascade, onUpdate: NoAction, map: "fk_api_key_user")
}

enum ActionTypeEnum {
  CREATE
  READ
  UPDATE
  DELETE
}

enum AuditEntityTypeEnum {
  block
  edge
  pipeline
  taxonomy
  metadata
  profile
  api_key
  code_repo
  docker_image
  verification
}

enum BlockTypeEnum {
  dataset
  model
}

enum BuildStatusEnum {
  pending
  success
  failed
}

enum DependencyTypeEnum {
  internal
  external
}

enum EntityTypeEnum {
  block
  edge
}

enum VerificationStatusEnum {
  pending
  passed
  failed
}