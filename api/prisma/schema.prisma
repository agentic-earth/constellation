generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["postgresqlExtensions"]
  recursive_type_depth = "5"
  interface            = "asyncio"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector(schema: "extensions")]
}

enum ActionTypeEnum {
  CREATE
  READ
  UPDATE
  DELETE
}

enum AuditEntityTypeEnum {
  BLOCK
  EDGE
  PIPELINE
  TAXONOMY
  METADATA
  USER
  API_KEY
  CODE_REPO
  DOCKER_IMAGE
  VERIFICATION
}

enum BlockTypeEnum {
  DATASET
  MODEL
}

enum EntityTypeEnum {
  BLOCK
  EDGE
}

enum BuildStatusEnum {
  PENDING
  SUCCESS
  FAILED
}

enum DependencyTypeEnum {
  INTERNAL
  EXTERNAL
}

model Users {
  user_id            String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username           String               @unique @db.VarChar(150)
  email              String               @unique @db.VarChar(255)
  password_hash      String               @db.VarChar(255)
  role               String               @db.VarChar(50)
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?            @default(now()) @db.Timestamptz(6)
  api_keys           ApiKeys[]
  audit_logs         AuditLogs[]
  block_versions     BlockVersions[]
  edge_verifications EdgeVerifications[]
  edge_versions      EdgeVersions[]
  pipelines          Pipelines[]
}

model Blocks {
  block_id              String                   @id @default(uuid()) @db.Uuid
  name                  String                   @db.VarChar(255)
  description           String?                  @db.Text
  block_type            BlockTypeEnum
  created_at            DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?                @updatedAt @db.Timestamptz(6)
  block_versions        BlockVersions[]
  vector_representations VectorRepresentations[]
}

model BlockVersions {
  version_id    String   @id @default(uuid()) @db.Uuid
  block_id      String   @db.Uuid
  version_number Int
  data          Json
  blocks        Blocks   @relation(fields: [block_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction)
}

model ApiKeys {
  api_key_id        String    @id @default(uuid()) @db.Uuid
  user_id           String    @db.Uuid
  encrypted_api_key String
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  expires_at        DateTime  @db.Timestamptz(6)
  is_active         Boolean?  @default(true)
  users             Users     @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model AuditLogs {
  log_id      String                 @id @default(uuid()) @db.Uuid
  user_id     String                 @db.Uuid
  action_type ActionTypeEnum
  entity_type AuditEntityTypeEnum
  entity_id   String                 @db.Uuid
  timestamp   DateTime?              @default(now()) @db.Timestamptz(6)
  details     Json?
  users       Users                  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

// ... other existing models ...

model VectorRepresentations {
  vector_id       String                @id @default(uuid()) @db.Uuid
  entity_type     EntityTypeEnum
  entity_id       String                @db.Uuid
  vector          Unsupported("vector")
  taxonomy_filter Json?
  created_at      DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?             @default(now()) @db.Timestamptz(6)
  blocks          Blocks                @relation(fields: [entity_id], references: [block_id], onDelete: Cascade, onUpdate: NoAction)
}

// ... additional enum and model definitions as needed ...