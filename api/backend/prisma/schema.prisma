// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

// Enum Definitions
enum BlockType {
  dataset
  model
}

enum EdgeType {
  primary
  secondary
  tertiary
}

enum EntityType {
  block
  edge
}

enum BuildStatus {
  pending
  success
  failed
}

enum DependencyType {
  internal
  external
}

enum VerificationStatus {
  pending
  passed
  failed
}

enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
}

enum AuditEntityType {
  block
  edge
  pipeline
  taxonomy
  metadata
  user
  api_key
  code_repo
  docker_image
  verification
}

// Model Definitions
model User {
  id            String         @id @default(uuid())
  username      String         @unique
  email         String         @unique
  passwordHash  String
  role          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  apiKeys       APIKey[]
  blocks        Block[]
  blockVersions BlockVersion[]
}

model APIKey {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  encryptedApiKey String
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  isActive        Boolean
}

model TaxonomyCategory {
  id              String             @id @default(uuid())
  name            String
  parent          TaxonomyCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId        String?
  children        TaxonomyCategory[] @relation("CategoryHierarchy")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  blockTaxonomies BlockTaxonomy[]
}

model Block {
  id                    String                      @id @default(uuid())
  name                  String
  blockType             BlockType
  description           String?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  createdBy             User?                       @relation(fields: [createdById], references: [id])
  createdById           String?
  versions              BlockVersion[]
  taxonomies            BlockTaxonomy[]
  vectorRepresentations BlockVectorRepresentation[]
  pipelineBlocks        PipelineBlock[]
}

model BlockVersion {
  id            String   @id @default(uuid())
  block         Block    @relation(fields: [blockId], references: [id])
  blockId       String
  versionNumber Int
  metadata      Json?
  createdAt     DateTime @default(now())
  createdBy     User     @relation(fields: [createdById], references: [id])
  createdById   String
  isActive      Boolean
}

model BlockTaxonomy {
  id         String           @id @default(uuid())
  block      Block            @relation(fields: [blockId], references: [id])
  blockId    String
  category   TaxonomyCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime         @default(now())
}

model CodeRepo {
  id          String     @id @default(uuid())
  entityType  EntityType
  entityId    String
  repoUrl     String
  branch      String
  lastUpdated DateTime   @updatedAt
}

model DockerImage {
  id          String      @id @default(uuid())
  entityType  EntityType
  entityId    String
  imageTag    String
  registryUrl String
  buildStatus BuildStatus
  buildLogs   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Dependency {
  id               String         @id @default(uuid())
  entityType       EntityType
  entityId         String
  dependencyType   DependencyType
  dependencyDetail String
}

model Edge {
  id                    String                     @id @default(uuid())
  name                  String
  edgeType              EdgeType
  description           String?
  currentVersionId      String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  versions              EdgeVersion[]
  vectorRepresentations EdgeVectorRepresentation[]
  pipelineEdges         PipelineEdge[]
}

model EdgeVersion {
  id            String             @id @default(uuid())
  edge          Edge               @relation(fields: [edgeId], references: [id])
  edgeId        String
  versionNumber Int
  metadata      Json?
  createdAt     DateTime           @default(now())
  createdBy     String
  isActive      Boolean
  verifications EdgeVerification[]
}

model EdgeVerification {
  id                 String             @id @default(uuid())
  edgeVersion        EdgeVersion        @relation(fields: [edgeVersionId], references: [id])
  edgeVersionId      String
  verificationStatus VerificationStatus
  verificationLogs   String?
  verifiedAt         DateTime?
  verifiedBy         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Pipeline {
  id                    String          @id @default(uuid())
  name                  String
  description           String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  dagsterPipelineConfig Json?
  createdBy             String
  timesRun              Int
  averageRuntime        Float
  blocks                PipelineBlock[]
  edges                 PipelineEdge[]
}

model PipelineBlock {
  id         String   @id @default(uuid())
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId String
  block      Block    @relation(fields: [blockId], references: [id])
  blockId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PipelineEdge {
  id            String   @id @default(uuid())
  pipeline      Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId    String
  edge          Edge     @relation(fields: [edgeId], references: [id])
  edgeId        String
  sourceBlockId String
  targetBlockId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BlockVectorRepresentation {
  id             String   @id @default(uuid())
  block          Block    @relation(fields: [blockId], references: [id])
  blockId        String
  vectorDb       String
  vectorKey      String
  taxonomyFilter Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model EdgeVectorRepresentation {
  id             String   @id @default(uuid())
  edge           Edge     @relation(fields: [edgeId], references: [id])
  edgeId         String
  vectorDb       String
  vectorKey      String
  taxonomyFilter Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AuditLog {
  id         String          @id @default(uuid())
  userId     String
  actionType ActionType
  entityType AuditEntityType
  entityId   String
  timestamp  DateTime        @default(now())
  details    Json?
}
